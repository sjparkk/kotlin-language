package com.example.kotlinlanguage.part3_1

/**
 * 고차 함수란, 인수로 함수를 받거나, 함수를 반환하는 함수를 뜻한다.
 *
 * 함수 리터럴은 보통 고차 함수를 위해 사용된다.
 * 고차 함수는 다음의 코드와 같은 상황에서 유용하게 사용할 수 있다.
 *
 * 어떤 작업을 시작하고 끝낼 때마다
 * println("=== 작업 시작 ===")
 * println("=== 작업 끝 ===")
 *
 * 을 출력한다고 했을 때 매번 println을 호출하자니 코드가 중복되어 보기에 좋지 않다.
 * 이럴때 고차 함수를 이용하여 이 코드 조각을 개선할 수 있다.
 */

//() -> Unit 타입의 함수를 인수로 받는 고차 함수 decorate 선언
fun decorate(task: () -> Unit) {
    println("=== 작업 시작 ===")
    //task 매개변수가 가리키는 함수를 호출
    task()
    println("=== 작업 끝 ===")
}

fun main(args: Array<String>) {
    //decorate함수에 함수 리터럴을 인수로 전달
    decorate({
        val a = 10; val b = 5
        println("$a + $b = ${a + b}")
    })

    //이렇듯 어떤 함수를 호출하기 전/후에 수행해야 할 고정적인 작업이 있다면 고차함수를 활용
    //추가적으로 만약 고차 함수의 마지막 매개변수 타입이 함수 타입이라면, 함수 호출 시 소괄호를 생략할 수 있다.
    decorate{
        println("some"); println("tasks")
    }

    //만약 고차 함수의 매개변수가 여러 개이고, 함수 타입의 매개변수가 맨 마지막에 온다면, 일반 인수들만 소괄호로 감싸고, 함수 리터럴은 바깥으로 뺄 수 있다.
    //decorator(인수 1, 인수 2, ...) { ... }

}